import { BridgeService, DialogBridge } from "@lpfreelance/electron-bridge/main";
import { app, BrowserWindow } from "electron";
import log from "electron-log";
import Store from "electron-store";

import { SerialPort } from "serialport";
import { StoreType, schema as storeSchema } from "../store/settings.store";
import { ApplicationBridge } from "../bridges/generated/main/application.bridge";
import { SerialPortBridge } from "../bridges/generated/main/serialport.bridge";
import { SettingsBridge } from "../bridges/generated/main/settings.bridge";
import { MainApplication } from "./main-app";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow;
let bridgeService: BridgeService;
let settingsBridge: SettingsBridge;
let serialBridge: SerialPortBridge;
let applicationBridge: ApplicationBridge;

// Optional, initialize the logger for any renderer processses
log.initialize({ preload: true });

const mainLog = log.scope("MAIN-INDEX");

mainLog.info("Log from the main process");

const store = new Store<StoreType>({
  schema: storeSchema,
  defaults: {
    opcuaHost: "localhost",
    opcuaPort: 4840,
    serialPort: "COM1",
    serialBaudRate: 115200,
  },
});

const application = new MainApplication(store, log);

const initializeBridges = (): void => {
  // Create bridge service.
  bridgeService = new BridgeService();

  settingsBridge = new SettingsBridge(store, log.scope("SETTINGS-BRIDGE"));

  serialBridge = new SerialPortBridge(log.scope("SERIAL-BRIDGE"));

  applicationBridge = new ApplicationBridge(
    application,
    log.scope("APPLICATION-BRIDGE")
  );

  // Append bridges that you need and register all IPC handlers.
  bridgeService
    .add(new DialogBridge())
    .add(settingsBridge)
    .add(serialBridge)
    .add(applicationBridge)
    .registerAll();
};

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  mainLog.info("electron-squirrel-startup quit");
  app.quit();
}

initializeBridges();

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    minHeight: 600,
    minWidth: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  if (process.platform !== "darwin") {
    mainWindow.removeMenu();
  }

  mainLog.info("Create windows");

  mainWindow.on("closed", () => {
    mainLog.info("Window closed");
    mainWindow = null;
  });

  mainWindow.on("show", () => {
    mainLog.info("Window show");
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (process.env.WEBPACK_SERVE) {
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", async () => {
  mainLog.info("All windows closed");
  if (process.platform !== "darwin") {
    await application.stop();
    app.quit();
  }
});

app.on("activate", () => {
  mainLog.info("On activate");
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
